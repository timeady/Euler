"""
Each new term in the Fibonacci sequence is generated by
adding the previous two terms. By starting with 1 and 2,
the first 10 terms will be:

1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose
values do not exceed four million, find the sum of the even-valued terms.
"""


def fibonacci(max_n):
    n, prev = 1, 1
    while n <= max_n:
        yield n
        n, prev = n + prev, n


total = sum(n for n in fibonacci(4000000) if n % 2 == 0)
print(f"Generator solution = {total}")


def euler_solution_brute(n):
    sums, a, b = 0, 1, 1
    while b < n:
        if b % 2 == 0:
            sums = sums + b
        h = a + b
        a = b
        b = h
    return sums


print(f"Brute force algo = {euler_solution_brute(4000000)}")


"""
    Fib = 1 1 2 3 5 8 13 21 34 55 89 144...
    Every third number is even, so check only sum of the even numbers
"""
def ref_evens(n):
    sums, a, b = 0, 1, 1
    c = a + b
    while c < n:
        sums = sums + c
        a = b + c
        b = c + a
        c = a + b
    return sums


print(f"Refactor only evens = {ref_evens(4000000)}")


"""
    Fib evens = 2, 8 34, 144
    This follows recursively E(n) =  E(n - 1) + E(n - 2)
"""
# def recursive_fib(n):
#     if n == 0 or n == 1:
#         return n
#     else:
#         return recursive_fib(n - 1) + recursive_fib(n - 2)


# print(recursive_fib(100))


# def rec_fib(a, b, n):
#     if n < 3:
#         return a + b
#     return rec_fib(b, a + b, n - 1)
#
#
# print(f"Bottom up recursive = {rec_fib(0, 1, 10)}")

